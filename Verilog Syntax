Case sensitive.
Sized Numbers EX-2'b10 here 2 is size,binary is the type and 10 is the number
Int a = 'h3AD4 here integer is declared so it automatically has 32 bits size.
Negative numbers are declared with a minus sign should be at the start.
Strings are declared with double quotes and cannot be multiple line .
A Simple D Flip Flop Code-
module dff (input a ,clk,rstn;
            output reg dd;)
   always@(posedge clk) begin
   if (!rstn)
   q <= 0;
   
   else 
   
   q <= d;
   
end

endmodule

AND Gate-

   module AND_2(output Y, input A, B);
    and(Y, A, B); 
endmodule
  
OR Gate-
 module OR_2(output Y, input A, B);
    or(Y, A, B); 
endmodule
 
XOR Gate-
module XOR_2_gate_level(output Y, input A, B);
    xor (Y, A, B); 
endmodule

Different Data Types-
Nets- Equivalent to connedcting hardware components
Wires-Can be vectors as well
integer-a 32 bit general purpose data type
time-used to assign simulation time
realtime-stores simulation time as a float type.

net is 1 bit wide if a range is not specified that is a scalar
a vector is defined as -
wire [7:0] n0
where 7 is the most significsnt bit and 0 is the least significant bit
various data members can be accessed by the array indices 
for example-
in the above example -
n0[0]=1;
n[0]=2;
and so forth.

string uses-
module test
reg [8*11:0] str1;
reg[8*5:0] str2;
reg[8*21:0] str3;

initial begin
str1 = "hello world";
str2 = "hello world";
str3 = "hello world";

$display("str1 = %s",str1);
$display("str2 = %s",str2);
$display("str3 = %s",str3);

in secon d case only world is printed rest is truncated and in the third case "      hello world" is printed as the leftmost spaces are filled as spaces.
ARRAYS-
wire y1[3:0] where y has depth of 4 amd 1 bit wide each 
wire [15:0] y1 [3:0] where y1 has 16 bit wide and depth of 4
wire [15:0] y1 [3:0][0:7] where y1 is a 2d array

PORTS-
There are three types of ports-
inout,input,output;
signed is a declaration we use for signed representation of a signal

ASSIGN:-
assign statements are used to assign a certain value continously to a certain wire that is defined in this statement
syntax-
assign *exp*=[drive strength][delay]<expression of different signals or const value>

VERILOG OPERATORS-
Operator	Description
a + b	a plus b
a - b	a minus b
a * b	a multiplied by b
a / b	a divided by b
a % b	a modulo b
a ** b	a to the power of b

Operator	Description
a < b	a less than b
a > b	a greater than b
a <= b	a less than or equal to b
a >= b	a greater than or equal to b

Operator	Description
a === b	a equal to b, including x and z
a !== b	a not equal to b, including x and z
a == b	a equal to b, result can be unknown
a != b	a not equal to b, result can be unknown

Operator	Description
a && b	evaluates to true if a and b are true
a || b	evaluates to true if a or b are true
!a	Converts non-zero value to zero, and vice versa

VERILOG CONCATENATION:-
This property is used to club two variables or nets.
Replication is use4d if a statment is to be repeated seversal times
for example-
wire a;
wire [6:0] res;
assign wire = {7[a]};

always is used for procedural coding and is used for a certain condition
always must be defined with a sensitivity list i.e. the variables which are changed and to execute the always block when the said variables change.
if there is no variables defined then this will run conti throughout the entire simulation and therefore simulation wont run and hang.

COMBO LOGIC-
module combo( input a,b,c,d
output e)
always@(a or b or c or d or e)begin
e=((a&b) | (c^d) & e);

   
