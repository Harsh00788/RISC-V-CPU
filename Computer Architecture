Components
PC: or Program Counter holds the address of the next instruction that is to be executed from the fetch. Most instructions execute sequentially. Branch and jump instructions specify a target instruction to execute next, and the PC logic must update the PC accordingly.
Fetch: Holds the instructions to be executed.
Decode Logic: Now that we hold the instruction, we must decode it to execute it. We must break it into fields based on its type.
Register file: Register file contains the local storage or registers the program is working on. We decode the instruction to find out the registers we will be working on, this register is then read from the register file.
Register File Write: The registers in the register file can also be written to store the output of the register.
DMem: Our test program executes entirely out of the register file and does not require a data memory (DMem). But no CPU is complete without one. The DMem is written to by store instructions and read from by load instructions ~~straight from the edex site


PC Logic
The PC is a byte address, only referencing the first byte of the address where the instruction is stored in IMem. Each instruction is 4 bytes, so a change in PC is equivalent to 4 bytes of increment in IMem. The PC is reset by the reset signal.
Fetch
The instruction memory (IMem) holds the instructions to execute. To read the IMem, or "fetch", we simply pull out the instruction pointed to by the PC.
Decode Logic
Now that we have an instruction to execute, we must interpret, or decode, it. We must break it into fields based on its type. These fields would tell us which registers to read, which operation to perform, etc.
Register File Read
The register file is a small local storage of values the program is actively working with. We decoded the instruction to determine which registers we need to operate on. Now, we need to read those registers from the register file.
Arithmetic Logic Unit (ALU)
Now that we have the register values, it’s time to operate on them. This is the job of the ALU. It will add, subtract, multiply, shift, etc, based on the operation specified in the instruction.
Register File Write
Now the result value from the ALU can be written back to the destination register specified in the instruction.
DMem
Our test program executes entirely out of the register file and does not require a data memory (DMem). But no CPU is complete without one. The DMem is written to by store instructions and read from by load instructions.


Accessing memory in RISC-V
The memory can be accessed using the tag

`READONLY_MEM($adrs,$$instr[31:0]);

Initially, we will implement only sequential fetching, so the PC update will be, for now, simply a counter. Note that:

The PC is a byte address, meaning it references the first byte of an instruction in the IMem. Instructions are 4 bytes long, so, although the PC increment is depicted as "+1" (instruction), the actual increment must be by 4 (bytes). The lowest two PC bits must always be zero in normal operation.
Instruction fetching should start from address zero, so the first $pc value with $reset deasserted should be zero, as is implemented in the logic diagram below.
Unlike our earlier counter circuit, for readability, we use unique names for $pc and $next_pc, by assigning $pc to the previous $next_pc.
 

Initial PC logic

Initial PC Logic

 We will implement our IMem by instantiating a Verilog macro. This macro accepts a byte address as input, and produces the 32-bit read data as output. The macro can be instantiated, for example, as:

`READONLY_MEM($addr, $$read_data[31:0])

Verilog macro instantiation is preceded by a back-tick (not to be confused with a single quote).

In expressions like this that do not syntactically differentiate assigned signals from consumed signals, it is necessary to identify assigned signals using a "$$" prefix. And, as always, an assigned signal declares its bit range. Thus, $$read_data[31:0] is used above.

This macro is simplified in several ways versus what you would typically see for an array macro:

There is no way to write to our array. The program specified in the template is magically populated into this array for you.
Typically, an array would have a read enable input as well. This read enable would indicate, each cycle, whether to perform a read. Our array will always read, and we are not concerned with the power savings a read enable could offer.
Typically, a memory structure like our IMem would be implemented using a physical structure called static random access memory, or SRAM. The address would be provided in one clock cycle, and the data would be read out in the next cycle. Our entire CPU, however, will execute within a single clock cycle. Our array provides its output data on the same clock cycle as the input address. Our macro would result in an implementation using flip-flops that would be far less optimal than SRAM.

SystemVerilog gives us an operator that makes this comparison a little simpler:

$is_u_instr = $instr[6:2] ==? 5'b0x101;

The ==? operator above allows some bits to be excluded from the comparison by specifying them as "x" (referred to as don’t-care).
